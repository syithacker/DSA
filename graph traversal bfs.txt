#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX 100
// BFS function from a given source s
void bfs(int adj[MAX][MAX], int V, int s) {
// Queue for BFS
int q[MAX], front = 0, rear = 0;
// Array to mark all vertices as not visited initially
bool visited[MAX] = { false };
// Mark the source node as visited and enqueue it
visited[s] = true;
q[rear++] = s;
printf("BFS Traversal starting from node %d: ", s);
// Iterate over the queue
while (front < rear) {
// Dequeue a vertex and print it
int curr = q[front++];
printf("%d ", curr);
// Get all adjacent vertices of the dequeued vertex
for (int i = 0; i < V; i++) {
if (adj[curr][i] == 1 && !visited[i]) {
visited[i] = true;
q[rear++] = i;
}
}
}
printf("\n");
}
// Function to add an edge to the graph
void addEdge(int adj[MAX][MAX], int u, int v) {
adj[u][v] = 1;
adj[v][u] = 1; // For undirected graph
}


int main() {
// Number of vertices in the graph
int V = 5;
// Adjacency matrix representation of the graph
int adj[MAX][MAX] = {0};
// Add edges to the graph
addEdge(adj, 0, 1);
addEdge(adj, 0, 2);
addEdge(adj, 1, 3);
addEdge(adj, 1, 4);
addEdge(adj, 2, 4);
// Perform BFS traversal from node 0
bfs(adj, V, 0);
return 0;
}